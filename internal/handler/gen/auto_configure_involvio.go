// Code generated by go-swagger; DO NOT EDIT.
// Auto configures api handlers Implementations.

package gen

import (
	"crypto/tls"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/Slava02/Involvio/internal/handler"
	swaggerapi "github.com/Slava02/Involvio/internal/handler/gen/api"
	"github.com/Slava02/Involvio/internal/handler/gen/api/events"
	"github.com/Slava02/Involvio/internal/handler/gen/api/spaces"
	"github.com/Slava02/Involvio/internal/handler/gen/api/users"
)

//go:generate swagger generate server --target ../../../../Involvio --name Involvio --spec ../../../docs/swagger2.yaml --api-package api --model-package internal/entity --server-package internal/handler/gen --implementation-package github.com/Slava02/Involvio/internal/handler --principal entity.Principal

// This file auto configures the api backend implementation.
// handler package must already exist.
// handler.New() is implemented by user, and must return an object
// or interface that implements Handler interface defined below.
var Impl Handler = handler.New()

// Handler handles all api server backend configurations and requests
type Handler interface {
	Configurable
	EventsHandler
	SpacesHandler
	UsersHandler
}

// Configurable handles all server configurations
type Configurable interface {
	ConfigureFlags(api *swaggerapi.InvolvioAPI)
	ConfigureTLS(tlsConfig *tls.Config)
	ConfigureServer(s *http.Server, scheme, addr string)
	CustomConfigure(api *swaggerapi.InvolvioAPI)
	SetupMiddlewares(handler http.Handler) http.Handler
	SetupGlobalMiddleware(handler http.Handler) http.Handler
}

/* EventsHandler  */
type EventsHandler interface {
	/* CreateEvent Create event */
	CreateEvent(params events.CreateEventParams) middleware.Responder
	/* GetEvent event info */
	GetEvent(params events.GetEventParams) middleware.Responder
	/* JoinEvent join event */
	JoinEvent(params events.JoinEventParams) middleware.Responder
}

/* SpacesHandler  */
type SpacesHandler interface {
	/* CreateSpace create a space */
	CreateSpace(params spaces.CreateSpaceParams) middleware.Responder
	/* GetSpace get space info */
	GetSpace(params spaces.GetSpaceParams) middleware.Responder
	/* JoinSpace join space */
	JoinSpace(params spaces.JoinSpaceParams) middleware.Responder
}

/* UsersHandler  */
type UsersHandler interface {
	/* CreateUser create user */
	CreateUser(params users.CreateUserParams) middleware.Responder
	/* DeleteUser delete user */
	DeleteUser(params users.DeleteUserParams) middleware.Responder
	/* GetUser show profile */
	GetUser(params users.GetUserParams) middleware.Responder
	/* UpdateUser update user form/info, promote/reduce user privilege */
	UpdateUser(params users.UpdateUserParams) middleware.Responder
}

func configureFlags(api *swaggerapi.InvolvioAPI) {
	Impl.ConfigureFlags(api)
}

func configureAPI(api *swaggerapi.InvolvioAPI) http.Handler {

	api.ServeError = errors.ServeError

	api.UseSwaggerUI()

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.EventsCreateEventHandler = events.CreateEventHandlerFunc(func(params events.CreateEventParams) middleware.Responder {
		return Impl.CreateEvent(params)
	})
	api.SpacesCreateSpaceHandler = spaces.CreateSpaceHandlerFunc(func(params spaces.CreateSpaceParams) middleware.Responder {
		return Impl.CreateSpace(params)
	})
	api.UsersCreateUserHandler = users.CreateUserHandlerFunc(func(params users.CreateUserParams) middleware.Responder {
		return Impl.CreateUser(params)
	})
	api.UsersDeleteUserHandler = users.DeleteUserHandlerFunc(func(params users.DeleteUserParams) middleware.Responder {
		return Impl.DeleteUser(params)
	})
	api.UsersGetUserHandler = users.GetUserHandlerFunc(func(params users.GetUserParams) middleware.Responder {
		return Impl.GetUser(params)
	})
	api.EventsGetEventHandler = events.GetEventHandlerFunc(func(params events.GetEventParams) middleware.Responder {
		return Impl.GetEvent(params)
	})
	api.SpacesGetSpaceHandler = spaces.GetSpaceHandlerFunc(func(params spaces.GetSpaceParams) middleware.Responder {
		return Impl.GetSpace(params)
	})
	api.EventsJoinEventHandler = events.JoinEventHandlerFunc(func(params events.JoinEventParams) middleware.Responder {
		return Impl.JoinEvent(params)
	})
	api.SpacesJoinSpaceHandler = spaces.JoinSpaceHandlerFunc(func(params spaces.JoinSpaceParams) middleware.Responder {
		return Impl.JoinSpace(params)
	})
	api.UsersUpdateUserHandler = users.UpdateUserHandlerFunc(func(params users.UpdateUserParams) middleware.Responder {
		return Impl.UpdateUser(params)
	})

	api.PreServerShutdown = func() {}

	api.ServerShutdown = func() {}

	// CustomConfigure can override or add to configurations set above
	Impl.CustomConfigure(api)

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
	Impl.ConfigureTLS(tlsConfig)
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix".
func configureServer(s *http.Server, scheme, addr string) {
	Impl.ConfigureServer(s, scheme, addr)
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation.
func setupMiddlewares(handler http.Handler) http.Handler {
	return Impl.SetupMiddlewares(handler)
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics.
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return Impl.SetupGlobalMiddleware(handler)
}
