// Code generated by go-swagger; DO NOT EDIT.

package entity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Form form
//
// swagger:model Form
type Form struct {

	// admin
	// Example: true
	Admin bool `json:"admin,omitempty"`

	// creator
	// Example: true
	Creator bool `json:"creator,omitempty"`

	// pair tags
	PairTags Tags `json:"pair_tags,omitempty"`

	// space Id
	// Example: 123
	SpaceID int64 `json:"spaceId,omitempty"`

	// user tags
	UserTags Tags `json:"user_tags,omitempty"`
}

// Validate validates this form
func (m *Form) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePairTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Form) validatePairTags(formats strfmt.Registry) error {
	if swag.IsZero(m.PairTags) { // not required
		return nil
	}

	if err := m.PairTags.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pair_tags")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("pair_tags")
		}
		return err
	}

	return nil
}

func (m *Form) validateUserTags(formats strfmt.Registry) error {
	if swag.IsZero(m.UserTags) { // not required
		return nil
	}

	if err := m.UserTags.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("user_tags")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("user_tags")
		}
		return err
	}

	return nil
}

// ContextValidate validate this form based on the context it is used
func (m *Form) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePairTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Form) contextValidatePairTags(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PairTags.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pair_tags")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("pair_tags")
		}
		return err
	}

	return nil
}

func (m *Form) contextValidateUserTags(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UserTags.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("user_tags")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("user_tags")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Form) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Form) UnmarshalBinary(b []byte) error {
	var res Form
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
