// Code generated by go-swagger; DO NOT EDIT.

package entity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Space space
//
// swagger:model Space
type Space struct {

	// space description
	// Example: space for test
	SpaceDescription string `json:"space_description,omitempty"`

	// space id
	// Example: 1234
	SpaceID int64 `json:"space_id,omitempty"`

	// space name
	// Example: test
	SpaceName string `json:"space_name,omitempty"`

	// tags
	Tags TagOptions `json:"tags,omitempty"`
}

// Validate validates this space
func (m *Space) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Space) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := m.Tags.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tags")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tags")
		}
		return err
	}

	return nil
}

// ContextValidate validate this space based on the context it is used
func (m *Space) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Space) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Tags.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tags")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tags")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Space) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Space) UnmarshalBinary(b []byte) error {
	var res Space
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
